[{"path":"http://joeymays.xyz/karyotapR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 karyotapR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"karyotapR Basic Workflow","text":"","code":"library(karyotapR) library(forcats) set.seed(2023)  # seed is set to ensure tutorial is reproducible"},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"data-download","dir":"Articles","previous_headings":"Setup","what":"Data Download","title":"karyotapR Basic Workflow","text":"guide uses cell mixture experiment KaryoTap publication (Mays, 2023). Tapestri Pipeline .h5 output file available Zenodo can downloaded [curl::curl_download()] directly website.","code":"curl::curl_download(url = \"https://zenodo.org/record/8305841/files/tapestri-experiment01-panelv1.h5?download=1\",     destfile = \"./tap-cellmixture.h5\", quiet = FALSE)"},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"data-import","dir":"Articles","previous_headings":"Basic Usage","what":"Data Import","title":"karyotapR Basic Workflow","text":"cell mixture dataset imported .h5 file generated Tapestri Pipeline, generates new TapestriExpriment object. dataset comprises mixture 5 cell lines differing karyotypes processed Tapestri instrument single-cell DNA sequencing using Custom Oligo Panel 261 (.k.. Panel Version 1). Setting panel.id parameter automatically assigns correct probes grnaProbe barcodeProbe slots object, used special applications. Several useful processes run automatically import, indicated status messages. example, cytobands automatically added probe metadata, chromosome Y probes automatically detected moved specific slot object (although now chrY probes exist panel), special probes target endogenous human genome moved appropriate slots. Calling object print summary contained data. TapestriExperiment class built top SingleCellExperiment SummarizedExperiment classes, inherit basic functionality interface. Calling colData() rowData() return metadata cells probes/amplicons respectively.","code":"cellmix <- createTapestriExperiment(\"./tap-cellmixture.h5\", panel.id = \"CO261\")  # ── Loading Tapestri Experiment ──────────────────  # • Sample Name: Teresa_s_cell_line_mix  # • Pipeline Panel Name: CO261_NYU_Davoli_03102021_hg19  # • Pipeline Version: 2.0.2  # • Date Created: 2021-09-15  # ── Metrics ──  # • Number of Cells: 3555  # • Number of Probes: 330  # • Mean Reads per Cell per Probe: 89.22  # ── Notes ── ℹ Adding cytobands from hg19.  # ℹ ChrY probe ID(s) not found in TapestriExperiment object.  # ℹ No non-genomic probe IDs found. cellmix #> class: TapestriExperiment  #> dim: 330 3555  #> metadata(7): sample.name pipeline.panel.name ... date.h5.created #>   mean.reads.per.cell.per.probe #> assays(1): counts #> rownames(330): AMPL158802 AMPL146998 ... AMPL162086 AMPL161738 #> rowData names(8): probe.id chr ... cytoband arm #> colnames(3555): AACAACCTAATAGTGGTT-1 AACAACCTAGTCCTAGTT-1 ... #>   TTGTAATGCTCGTACCTT-1 TTGTATCACACTTGATCT-1 #> colData names(2): cell.barcode total.reads #> reducedDimNames(0): #> mainExpName: CNV #> altExpNames(1): alleleFrequency #> barcodeProbe: not specified #> grnaProbe: not specified #> gmmParams(0): colData(cellmix)  # cell metadata #> DataFrame with 3555 rows and 2 columns #>                              cell.barcode total.reads #>                               <character>   <numeric> #> AACAACCTAATAGTGGTT-1 AACAACCTAATAGTGGTT-1       60264 #> AACAACCTAGTCCTAGTT-1 AACAACCTAGTCCTAGTT-1       22455 #> AACAACCTATGGACGAGA-1 AACAACCTATGGACGAGA-1       51206 #> AACAACTGGCGCACTCTT-1 AACAACTGGCGCACTCTT-1       29616 #> AACAACTGGGACATAACG-1 AACAACTGGGACATAACG-1       17998 #> ...                                   ...         ... #> TTGGTAACTCCATATCTT-1 TTGGTAACTCCATATCTT-1       44154 #> TTGTAATGCCTATAGCTC-1 TTGTAATGCCTATAGCTC-1       24469 #> TTGTAATGCGAGTGTGCC-1 TTGTAATGCGAGTGTGCC-1       45023 #> TTGTAATGCTCGTACCTT-1 TTGTAATGCTCGTACCTT-1       16216 #> TTGTATCACACTTGATCT-1 TTGTATCACACTTGATCT-1       18831 rowData(cellmix)  # probe metadata #> DataFrame with 330 rows and 8 columns #>               probe.id      chr start.pos   end.pos total.reads median.reads #>            <character> <factor> <numeric> <numeric>   <numeric>    <integer> #> AMPL158802  AMPL158802        1   1479191   1479385      202832           49 #> AMPL146998  AMPL146998        1   6196653   6196900      112408           24 #> AMPL158817  AMPL158817        1  11832076  11832330       99472           22 #> AMPL158827  AMPL158827        1  17087135  17087388     1162986          304 #> AMPL158845  AMPL158845        1  24412922  24413191        1008            0 #> ...                ...      ...       ...       ...         ...          ... #> AMPL161732  AMPL161732        X 128880366 128880635      568729          133 #> AMPL161734  AMPL161734        X 130415574 130415843      231144           49 #> AMPL161735  AMPL161735        X 135429800 135430069      156462           33 #> AMPL162086  AMPL162086        X 140993717 140993974      195494           47 #> AMPL161738  AMPL161738        X 142794979 142795248      400235           93 #>               cytoband      arm #>            <character> <factor> #> AMPL158802      p36.33       1p #> AMPL146998      p36.31       1p #> AMPL158817      p36.22       1p #> AMPL158827      p36.13       1p #> AMPL158845      p36.11       1p #> ...                ...      ... #> AMPL161732       q26.1       Xq #> AMPL161734       q26.2       Xq #> AMPL161735       q26.3       Xq #> AMPL162086       q27.2       Xq #> AMPL161738       q27.3       Xq"},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"allele-frequency-clustering","dir":"Articles","previous_headings":"Basic Usage","what":"Allele Frequency Clustering","title":"karyotapR Basic Workflow","text":"cluster allele frequency partition different cell lines represented experiment. First, run Principal Components Analysis (PCA) use knee plot identify principal components (PCs) accounting variation dataset.  Next, run UMAP top PCs embed two dimensions plot result.  Next, partition data clusters using dbscan method. eps parameter can used adjust granularity clustering. can update UMAP plot clusters.  expected, 5 major clusters corresponding 5 cell lines sequencing run, smaller clusters representing doublets (.e., two cells sequenced together one droplet). can subset doublets pulling cell barcodes corresponding clusters 1-5 (clusters ordered named descending size) using subset “columns” object new object. done using logical vector, cell barcodes can passed character vector barcodes well. ’ll rename cluster labels renaming factor levels “cluster” column colData slot, print updated plot, count number cells cluster.","code":"cellmix <- runPCA(cellmix) PCAKneePlot(cellmix) cellmix <- runUMAP(cellmix, pca.dims = 1:4) #> ℹ Running UMAP on: alleleFrequency. reducedDimPlot(cellmix, dim.reduction = \"umap\") cellmix <- runClustering(cellmix, eps = 0.9) #> ℹ Finding clusters in: alleleFrequency UMAP reducedDimPlot(cellmix, dim.reduction = \"umap\", group.label = \"cluster\") cellmix.subset <- cellmix[, colData(cellmix)$cluster %in% 1:5] colData(cellmix.subset)$cluster <- forcats::fct_recode(colData(cellmix.subset)$cluster,     cellline1 = \"1\", cellline2 = \"2\", cellline3 = \"3\", cellline4 = \"4\", cellline5 = \"5\") reducedDimPlot(cellmix.subset, dim.reduction = \"umap\", group.label = \"cluster\") forcats::fct_count(colData(cellmix.subset)$cluster) #> # A tibble: 12 × 2 #>    f             n #>    <fct>     <int> #>  1 cellline1   987 #>  2 cellline2   591 #>  3 cellline3   575 #>  4 cellline4   450 #>  5 cellline5   398 #>  6 6             0 #>  7 7             0 #>  8 8             0 #>  9 9             0 #> 10 10            0 #> 11 11            0 #> 12 12            0"},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"copy-number-calling","dir":"Articles","previous_headings":"Basic Usage","what":"Copy Number Calling","title":"karyotapR Basic Workflow","text":"KaryoTap method works best reference population copy number chromosome arm known. used RPE1 cells diploid (2 copies) except third copy chromosome 10q arm. know KaryoTap preprint “cellline2” corresponds RPE1 cells. normalize read counts object calculate copy number score relative cellline 2. control.copy.number gives cluster label copy number value normalize chromosome arm . generateControlCopyNumberTemplate() creates dataframe used indicate copy number reference population. entry chr10q changed 3. calcCopyNumber function throw error median normalized counts probe reference population zero, otherwise result division--zero calculation error. probes need removed moving forward. calcNormCounts() calcCopyNumber() functions take count matrix main assay slot TapestriExperiment, perform operation, save result new assay slots, can accessed using assay() listed using assays(). Assays SingleCellExperiment sense sets measurements set samples (columns) features (rows). counts, normcounts copyNumber assays, features (probes) samples (cell barcodes) . calcSmoothCopyNumber() produces one smoothed copy number score chromosome cell. Since features chromosomes, longer probes, values get saved altExp (alternate experiment) slot, allows measurements samples (cell barcodes), different feature set top-level experiment TapestriExperiment object (.e. probes vs. chromosomes). Visualization copy number scores reveals heterogeneity. ’re showing copy number scores probe, smoothed copy number scores whole chromosome chromosome arm. See documentation assayHeatmap() details customization.    Finally, integer copy number value chromosome cell can called using Gaussian Mixture Model (GMM) framework. calcGMMCopyNumber() takes vector cell barcodes reference sample template data frame generateControlCopyNumberTemplate() indicating copy number chromosome arm reference. can use control.copy.number template generated earlier. specifying model copy number = {1,2,3,4}. results saved new assays “smoothedCopyNumber” altExp slots chromosomes chromosome arms.","code":"cellmix.subset <- calcNormCounts(cellmix.subset) control.copy.number <- generateControlCopyNumberTemplate(cellmix.subset, sample.feature.label = \"cellline3\",     copy.number = 2) control.copy.number[\"10q\", \"copy.number\"] <- 3 try(cellmix.subset <- calcCopyNumber(cellmix.subset, control.copy.number = control.copy.number,     sample.feature = \"cluster\")) #> Error in calcCopyNumber(cellmix.subset, control.copy.number = control.copy.number,  :  #>   AMPL158845, AMPL147043, AMPL147154, AMPL159975, AMPL147293, AMPL113086, #> AMPL147323, AMPL158390, and AMPL158655 control cell median equal to 0. This #> will cause a division-by-zero error. Filter out prior to proceeding. probes.to.remove <- c(\"AMPL158845\", \"AMPL147043\", \"AMPL147154\", \"AMPL159975\", \"AMPL147293\",     \"AMPL113086\", \"AMPL147323\", \"AMPL158390\", \"AMPL158655\") cellmix.subset <- cellmix.subset[!rowData(cellmix.subset)$probe.id %in% probes.to.remove,     ]  cellmix.subset <- calcCopyNumber(cellmix.subset, control.copy.number = control.copy.number,     sample.feature = \"cluster\") assays(cellmix.subset) #> List of length 3 #> names(3): counts normcounts copyNumber cellmix.subset <- calcSmoothCopyNumber(cellmix.subset) #> ℹ Smoothing copy number by median... #> ✔ Smoothing copy number by median... [9.2s] #> assayHeatmap(cellmix.subset, assay = \"copyNumber\", split.col.by = \"arm\", split.row.by = \"cluster\",     annotate.row.by = \"cluster\", color.preset = \"copy.number\") assayHeatmap(cellmix.subset, alt.exp = \"smoothedCopyNumberByChr\", assay = \"smoothedCopyNumber\",     split.row.by = \"cluster\", annotate.row.by = \"cluster\", color.preset = \"copy.number\") assayHeatmap(cellmix.subset, alt.exp = \"smoothedCopyNumberByArm\", assay = \"smoothedCopyNumber\",     split.row.by = \"cluster\", annotate.row.by = \"cluster\", color.preset = \"copy.number\") reference.bcs <- colData(cellmix.subset)$cell.barcode[colData(cellmix.subset)$cluster ==     \"cellline2\"] cellmix.subset <- calcGMMCopyNumber(cellmix.subset, cell.barcodes = reference.bcs,     control.copy.number = control.copy.number, model.components = 1:4) #> ℹ Calculating GMMs using 591 input cells. #> ℹ Generating probe values for 500 simulated cells... #> ✔ Generating probe values for 500 simulated cells... [2s] #>  #> ℹ Fitting Gaussian distributions to simulated cells... #> ✔ Fitting Gaussian distributions to simulated cells... [12.1s] #>  #> ℹ Calculating posterior probabilities... #> ✔ Calculating posterior probabilities... [580ms] #>  #> ℹ Calling copy number from posterior probabilities... #> ✔ Calling copy number from posterior probabilities... [190ms] #>  #> ✔ Saving whole chromosome copy number calls to altExp: smoothedCopyNumberByChr, #>   assay: gmmCopyNumber... #> ✔ Saving chromosome arm copy number calls to altExp: smoothedCopyNumberByArm, #>   assay: gmmCopyNumber... #> ✔ Saving GMM models and metadata to `gmmParams` slot... assayHeatmap(cellmix.subset, alt.exp = \"smoothedCopyNumberByChr\", assay = \"gmmCopyNumber\",     split.row.by = \"cluster\", annotate.row.by = \"cluster\", color.preset = \"copy.number\") assayHeatmap(cellmix.subset, alt.exp = \"smoothedCopyNumberByArm\", assay = \"gmmCopyNumber\",     split.row.by = \"cluster\", annotate.row.by = \"cluster\", color.preset = \"copy.number\")"},{"path":"http://joeymays.xyz/karyotapR/articles/karyotapR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"karyotapR Basic Workflow","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2023-09-16 #>  pandoc   2.19.2 @ /usr/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-5      2016-07-21 [1] CRAN (R 4.3.1) #>  askpass                1.2.0      2023-09-03 [1] CRAN (R 4.3.1) #>  Biobase              * 2.60.0     2023-04-25 [1] Bioconductor #>  BiocGenerics         * 0.46.0     2023-04-25 [1] Bioconductor #>  bitops                 1.0-7      2021-04-24 [1] CRAN (R 4.3.1) #>  bslib                  0.5.1      2023-08-11 [1] CRAN (R 4.3.1) #>  cachem                 1.0.8      2023-05-01 [1] CRAN (R 4.3.1) #>  circlize               0.4.15     2022-05-10 [1] CRAN (R 4.3.1) #>  cli                    3.6.1      2023-03-23 [1] CRAN (R 4.3.1) #>  clue                   0.3-64     2023-01-31 [1] CRAN (R 4.3.1) #>  cluster                2.1.4      2022-08-22 [3] CRAN (R 4.3.1) #>  codetools              0.2-19     2023-02-01 [3] CRAN (R 4.3.1) #>  colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.3.1) #>  ComplexHeatmap         2.16.0     2023-04-25 [1] Bioconductor #>  crayon                 1.5.2      2022-09-29 [1] CRAN (R 4.3.1) #>  dbscan                 1.1-11     2022-10-27 [1] CRAN (R 4.3.1) #>  DelayedArray           0.26.7     2023-07-28 [1] Bioconductor #>  desc                   1.4.2      2022-09-08 [1] CRAN (R 4.3.1) #>  digest                 0.6.33     2023-07-07 [1] CRAN (R 4.3.1) #>  doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.3.1) #>  dplyr                  1.1.3      2023-09-03 [1] CRAN (R 4.3.1) #>  evaluate               0.21       2023-05-05 [1] CRAN (R 4.3.1) #>  fansi                  1.0.4      2023-01-22 [1] CRAN (R 4.3.1) #>  farver                 2.1.1      2022-07-06 [1] CRAN (R 4.3.1) #>  fastmap                1.1.1      2023-02-24 [1] CRAN (R 4.3.1) #>  fitdistrplus           1.1-11     2023-04-25 [1] CRAN (R 4.3.1) #>  forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.3.1) #>  foreach                1.5.2      2022-02-02 [1] CRAN (R 4.3.1) #>  formatR                1.14       2023-01-17 [1] CRAN (R 4.3.1) #>  fs                     1.6.3      2023-07-20 [1] CRAN (R 4.3.1) #>  generics               0.1.3      2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb         * 1.36.3     2023-09-07 [1] Bioconductor #>  GenomeInfoDbData       1.2.10     2023-08-25 [1] Bioconductor #>  GenomicRanges        * 1.52.0     2023-04-25 [1] Bioconductor #>  GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.3.1) #>  ggplot2                3.4.3      2023-08-14 [1] CRAN (R 4.3.1) #>  GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.3.1) #>  glue                   1.6.2      2022-02-24 [1] CRAN (R 4.3.1) #>  gtable                 0.3.4      2023-08-21 [1] CRAN (R 4.3.1) #>  htmltools              0.5.6      2023-08-10 [1] CRAN (R 4.3.1) #>  IRanges              * 2.34.1     2023-06-22 [1] Bioconductor #>  iterators              1.0.14     2022-02-05 [1] CRAN (R 4.3.1) #>  jquerylib              0.1.4      2021-04-26 [1] CRAN (R 4.3.1) #>  jsonlite               1.8.7      2023-06-29 [1] CRAN (R 4.3.1) #>  karyotapR            * 1.0.1.9000 2023-09-16 [1] local #>  knitr                  1.44       2023-09-11 [1] CRAN (R 4.3.1) #>  labeling               0.4.3      2023-08-29 [1] CRAN (R 4.3.1) #>  lattice                0.21-8     2023-04-05 [3] CRAN (R 4.3.1) #>  lifecycle              1.0.3      2022-10-07 [1] CRAN (R 4.3.1) #>  magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.3.1) #>  MASS                   7.3-60     2023-05-04 [3] CRAN (R 4.3.1) #>  Matrix                 1.5-4.1    2023-05-18 [3] CRAN (R 4.3.1) #>  MatrixGenerics       * 1.12.3     2023-07-30 [1] Bioconductor #>  matrixStats          * 1.0.0      2023-06-02 [1] CRAN (R 4.3.1) #>  memoise                2.0.1      2021-11-26 [1] CRAN (R 4.3.1) #>  munsell                0.5.0      2018-06-12 [1] CRAN (R 4.3.1) #>  openssl                2.1.0      2023-07-15 [1] CRAN (R 4.3.1) #>  pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.3.1) #>  pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.3.1) #>  pkgdown                2.0.7      2022-12-14 [1] any (@2.0.7) #>  png                    0.1-8      2022-11-29 [1] CRAN (R 4.3.1) #>  purrr                  1.0.2      2023-08-10 [1] CRAN (R 4.3.1) #>  R6                     2.5.1      2021-08-19 [1] CRAN (R 4.3.1) #>  ragg                   1.2.5      2023-01-12 [1] CRAN (R 4.3.1) #>  RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.3.1) #>  Rcpp                   1.0.11     2023-07-06 [1] CRAN (R 4.3.1) #>  RCurl                  1.98-1.12  2023-03-27 [1] CRAN (R 4.3.1) #>  reticulate             1.32.0     2023-09-11 [1] CRAN (R 4.3.1) #>  rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.3.1) #>  rlang                  1.1.1      2023-04-28 [1] CRAN (R 4.3.1) #>  rmarkdown              2.24       2023-08-14 [1] CRAN (R 4.3.1) #>  rprojroot              2.0.3      2022-04-02 [1] CRAN (R 4.3.1) #>  RSpectra               0.16-1     2022-04-24 [1] CRAN (R 4.3.1) #>  S4Arrays               1.0.6      2023-08-30 [1] Bioconductor #>  S4Vectors            * 0.38.1     2023-05-02 [1] Bioconductor #>  sass                   0.4.7      2023-07-15 [1] CRAN (R 4.3.1) #>  scales                 1.2.1      2022-08-20 [1] CRAN (R 4.3.1) #>  sessioninfo            1.2.2      2021-12-06 [1] any (@1.2.2) #>  shape                  1.4.6      2021-05-19 [1] CRAN (R 4.3.1) #>  SingleCellExperiment * 1.22.0     2023-04-25 [1] Bioconductor #>  stringi                1.7.12     2023-01-11 [1] CRAN (R 4.3.1) #>  stringr                1.5.0      2022-12-02 [1] CRAN (R 4.3.1) #>  SummarizedExperiment * 1.30.2     2023-06-06 [1] Bioconductor #>  survival               3.5-5      2023-03-12 [3] CRAN (R 4.3.1) #>  systemfonts            1.0.4      2022-02-11 [1] CRAN (R 4.3.1) #>  textshaping            0.3.6      2021-10-13 [1] CRAN (R 4.3.1) #>  tibble                 3.2.1      2023-03-20 [1] CRAN (R 4.3.1) #>  tidyr                  1.3.0      2023-01-24 [1] CRAN (R 4.3.1) #>  tidyselect             1.2.0      2022-10-10 [1] CRAN (R 4.3.1) #>  umap                   0.2.10.0   2023-02-01 [1] CRAN (R 4.3.1) #>  utf8                   1.2.3      2023-01-31 [1] CRAN (R 4.3.1) #>  vctrs                  0.6.3      2023-06-14 [1] CRAN (R 4.3.1) #>  viridisLite            0.4.2      2023-05-02 [1] CRAN (R 4.3.1) #>  withr                  2.5.0      2022-03-03 [1] CRAN (R 4.3.1) #>  xfun                   0.40       2023-08-09 [1] CRAN (R 4.3.1) #>  XVector                0.40.0     2023-04-25 [1] Bioconductor #>  yaml                   2.3.7      2023-01-23 [1] CRAN (R 4.3.1) #>  zlibbioc               1.46.0     2023-04-25 [1] Bioconductor #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.3.1/lib/R/site-library #>  [3] /opt/R/4.3.1/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"http://joeymays.xyz/karyotapR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Mays. Author, maintainer, copyright holder.","code":""},{"path":"http://joeymays.xyz/karyotapR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mays J (2023). karyotapR: DNA Copy Number Analysis Genome-Wide Tapestri Panels. https://github.com/joeymays/karyotapR, http://joeymays.xyz/karyotapR/.","code":"@Manual{,   title = {karyotapR: DNA Copy Number Analysis for Genome-Wide Tapestri Panels},   author = {Joseph Mays},   year = {2023},   note = {https://github.com/joeymays/karyotapR, http://joeymays.xyz/karyotapR/}, }"},{"path":"http://joeymays.xyz/karyotapR/index.html","id":"karyotapr","dir":"","previous_headings":"","what":"DNA Copy Number Analysis for Genome-Wide Tapestri Panels","title":"DNA Copy Number Analysis for Genome-Wide Tapestri Panels","text":"karyotapR enables analysis DNA copy number (aneuploidy) using data produced KaryoTap method. Users can easily parse, manipulate, visualize datasets produced automated ‘Tapestri Pipeline’, support normalization, clustering, copy number calling. Functions also available deconvolute multiplexed samples genotype parsing barcoded reads exogenous lentiviral constructs. KaryoTap combines custom genome-wide targeted DNA sequencing panels Mission Bio Tapestri system Gaussian mixture model framework calling copy number.","code":""},{"path":"http://joeymays.xyz/karyotapR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"DNA Copy Number Analysis for Genome-Wide Tapestri Panels","text":"Mays JC et al., 2023. KaryoTap Enables Aneuploidy Detection Thousands Single Human Cells. https://www.biorxiv.org/content/10.1101/2023.09.08.555746v1.","code":""},{"path":"http://joeymays.xyz/karyotapR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DNA Copy Number Analysis for Genome-Wide Tapestri Panels","text":"can install current stable version karyotapR CRAN : can install development version karyotapR GitHub :","code":"install.packages('karyotapR') # install.packages(\"devtools\") devtools::install_github(\"joeymays/karyotapR\")"},{"path":"http://joeymays.xyz/karyotapR/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"DNA Copy Number Analysis for Genome-Wide Tapestri Panels","text":"details workflow, see Getting Started guide, articles site, package reference/documentation.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"createTapestriExperiment() constructs TapestriExperiment container object data stored .h5 file output Tapestri Pipeline. Read count matrix (probe x cell barcode) stored \"counts\" assay slot top-level experiment. Allele frequency matrix (variant x cell barcode) stored \"alleleFrequency\" assay slot \"alleleFrequency\" altExp (alternative experiment) slot. panel.id optional shortcut set special probe identities specific custom panels.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"","code":"createTapestriExperiment(   h5.filename,   panel.id = NULL,   get.cytobands = TRUE,   genome = \"hg19\",   move.non.genome.probes = TRUE,   filter.variants = TRUE,   verbose = TRUE )"},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"h5.filename File path .h5 file Tapestri Pipeline output. panel.id Character, Tapestri panel ID, either CO261, CO293, CO610, NULL. Initializes barcodeProbe grnaProbe slots. Default NULL. get.cytobands Logical, TRUE (default), retrieve add chromosome cytobands chromosome arms rowData (probe metadata). genome Character, reference genome pulling cytoband coordinates chromosome arm labels (see getCytobands()). \"hg19\" (default) currently supported. move.non.genome.probes Logical, TRUE (default), move counts metadata non-genomic probes altExp slots (see moveNonGenomeProbes()). filter.variants Logical, TRUE (default), stores variants passed Tapestri Pipeline filters. verbose Logical, TRUE (default), metadata output message text.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"TapestriExperiment object containing data Tapestri Pipeline output.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"panel-id-shortcuts","dir":"Reference","previous_headings":"","what":"Panel ID Shortcuts","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"panel.id optional shortcut set barcodeProbe grnaProbe slots TapestriExperiment specific custom Tapestri panels.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"co-","dir":"Reference","previous_headings":"","what":"CO261","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"barcodeProbe = \"specified\" grnaProbe = \"specified\"","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"co--1","dir":"Reference","previous_headings":"","what":"CO293","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"barcodeProbe = \"AMPL205334\" grnaProbe = \"AMPL205666\"","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"co--2","dir":"Reference","previous_headings":"","what":"CO610","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"barcodeProbe = \"CO610_AMP351\" grnaProbe = \"CO610_AMP350\"","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"raw-data","dir":"Reference","previous_headings":"","what":"Raw Data","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"Read count allele frequency matrices imported appropriate slots described . filter.variants == TRUE (default) loads allele frequency variants passed internal filters Tapestri Pipeline. greatly reduces number variants tens thousands hundreds likely consequential variants, saving RAM reducing operation time.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"metadata","dir":"Reference","previous_headings":"","what":"Metadata","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"Several metadata sets copied generated stored appropriate TapestriExperiment slot construction. Probe panel metadata stored .h5 file copied rowData. Basic QC stats (e.g. total number reads per probe) added rowData. Basic QC stats (e.g. total number reads per cell barcode) added colData. Experiment-level metadata stored metadata.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"optional-operations","dir":"Reference","previous_headings":"","what":"Optional Operations","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"Two additional major operations called default TapestriExperiment construction convenience. get.cytobands == TRUE (default) calls getCytobands(), retrieves chromosome arm cytoband probe based stored positional data saves rowData. downstream smoothing plotting functions may fail chromosome arms present rowData, generally always run. move.non.genome.probes calls moveNonGenomeProbes(), moves probes corresponding specified tags altExp (alternative experiment) slots TapestriExperiment object. exception probes chromosome Y; CNVs chrY rare, move altExp separate analysis. Probes corresponding barcodeProbe grnaProbe slots, specified panel.id shortcut manually (see Custom Slot Getters Setters), automatically moved altExp operation well. probes present, function generate warning message, always safe (recommended) run default. remaining probes targeting human chromosome specified shortcut tags moved otherProbeCounts slot.","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/CreateTapestriExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create TapestriExperiment object from Tapestri Pipeline output — createTapestriExperiment","text":"","code":"if (FALSE) { tapExperiment <- createTapestriExperiment(\"myh5file.h5\", \"CO293\") }"},{"path":"http://joeymays.xyz/karyotapR/reference/PCAKneePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of PCA proportion of variance explained — PCAKneePlot","title":"Plot of PCA proportion of variance explained — PCAKneePlot","text":"Draws \"knee plot\" PCA proportion variance explained determine principal components (PCs) include downstream applications e.g. clustering. Variance explained PC indicated line. Cumulative variance explained indicated bars.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/PCAKneePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of PCA proportion of variance explained — PCAKneePlot","text":"","code":"PCAKneePlot(TapestriExperiment, alt.exp = \"alleleFrequency\", n.pcs = 10)"},{"path":"http://joeymays.xyz/karyotapR/reference/PCAKneePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of PCA proportion of variance explained — PCAKneePlot","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp use, NULL uses top-level/main experiment. Default \"alleleFrequency\". n.pcs Numeric, number PCs plot, starting 1. Default 10.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/PCAKneePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of PCA proportion of variance explained — PCAKneePlot","text":"ggplot2 object, combined line plot bar graph","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/PCAKneePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of PCA proportion of variance explained — PCAKneePlot","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- runPCA(tap.object, alt.exp = \"alleleFrequency\") PCAKneePlot(tap.object, n.pcs = 5)"},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"TapestriExperiment Class Definition — TapestriExperiment-class","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"TapestriExperiment Class Definition","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"","code":"# S4 method for TapestriExperiment show(object)"},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"object R object TapestriExperiment TapestriExperiment object","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"TapestriExperiment object","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"show(TapestriExperiment): Show method TapestriExperiment","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"barcodeProbe character. grnaProbe character. gmmParams list.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/TapestriExperiment-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TapestriExperiment Class Definition — TapestriExperiment-class","text":"","code":"tapExpObject <- new(\"TapestriExperiment\")"},{"path":"http://joeymays.xyz/karyotapR/reference/assayBoxPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a box plot from assay data — assayBoxPlot","title":"Generate a box plot from assay data — assayBoxPlot","text":"Draws box plot data indicated TapestriExperiment assay slot. especially useful visualizing altExp count data, counts probes chrY barcode probe counts.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/assayBoxPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a box plot from assay data — assayBoxPlot","text":"","code":"assayBoxPlot(   TapestriExperiment,   alt.exp = NULL,   assay = NULL,   log.y = TRUE,   split.features = FALSE,   split.x.by = NULL,   split.y.by = NULL )"},{"path":"http://joeymays.xyz/karyotapR/reference/assayBoxPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a box plot from assay data — assayBoxPlot","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp plot. NULL (default) uses top-level experiment TapestriExperiment. assay Character, assay plot. NULL (default) selects first assay listed TapestriExperiment. log.y Logical, TRUE, scales data using log1p(). Default TRUE. split.features Logical, TRUE, splits plot rowData features slot one row feature/probe. Default FALSE. split.x.Character, colData column use X-axis categories. Default NULL. split.y.Character, colData column use Y-axis splitting/faceting. Default NULL.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/assayBoxPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a box plot from assay data — assayBoxPlot","text":"ggplot object, box plot","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/assayBoxPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a box plot from assay data — assayBoxPlot","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". assayBoxPlot(tap.object, alt.exp = \"chrYCounts\", split.features = TRUE, split.x.by = \"test.cluster\")"},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate heatmap of assay data — assayHeatmap","title":"Generate heatmap of assay data — assayHeatmap","text":"Creates heatmap data indicated TapestriObject assay slot using ComplexHeatmap package. Heatmaps generated transposed (.e. x-y flipped) representations assay matrix. Additional ComplexHeatmap::Heatmap() parameters can passed overwrite defaults.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate heatmap of assay data — assayHeatmap","text":"","code":"assayHeatmap(   TapestriExperiment,   alt.exp = NULL,   assay = NULL,   split.col.by = NULL,   split.row.by = NULL,   annotate.row.by = NULL,   color.preset = NULL,   color.custom = NULL,   ... )"},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate heatmap of assay data — assayHeatmap","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp slot use. NULL (default) uses top-level/main experiment. assay Character, assay slot use. NULL (default) uses first-indexed assay (usually \"counts\"). split.col.Character, rowData column split columns , .e. \"chr\" \"arm\". Default NULL. split.row.Character, colData column split rows , .e. \"cluster\". Default NULL. annotate.row.Character, colData column use block annotation. Default NULL. color.preset Character, color preset use heatmap color, either \"copy.number\" \"copy.number.denoise\" (see Details). Overrides color.custom. NULL (default) uses default ComplexHeatmap coloring. color.custom Color mapping function given circlize::colorRamp2(). color.preset must NULL. ... Additional parameters pass ComplexHeatmap::Heatmap().","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate heatmap of assay data — assayHeatmap","text":"ComplexHeatmap object","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"-copy-number-","dir":"Reference","previous_headings":"","what":"\"copy.number\"","title":"Generate heatmap of assay data — assayHeatmap","text":"Blue-white-red gradient 0-2-4. 4 8+ red-black gradient.","code":"circlize::colorRamp2(c(0,1,2,3,4,8), c('#2c7bb6','#abd9e9','#ffffff','#fdae61','#d7191c', \"black\"))"},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"-copy-number-denoise-","dir":"Reference","previous_headings":"","what":"\"copy.number.denoise\"","title":"Generate heatmap of assay data — assayHeatmap","text":"Similar 'copy.number' present, white range 1.5-2.5 reduce appearance noise around diploid cells.","code":"circlize::colorRamp2(c(0,1,1.5,2,2.5,3,4,8), c('#2c7bb6','#abd9e9','#ffffff','#ffffff','#ffffff','#fdae61','#d7191c', \"black\"))"},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/assayHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate heatmap of assay data — assayHeatmap","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". assayHeatmap(tap.object,   assay = \"counts\", split.row.by = \"test.cluster\",   annotate.row.by = \"test.cluster\", split.col.by = \"chr\" )"},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"calcCopyNumber() transforms normalized count matrix normcounts TapestriExperiment object copy number values based set reference cell barcodes given copy number value (e.g. 2 diploid). practically used set median copy number usually diploid reference cell population known copy number value, e.g. 2, calculate copy number cells relative reference population. occurs individually probe, result one copy number value per cell barcode per probe (cell-probe unit). control.copy.number data.frame lookup table used indicate copy number value cell barcodes use reference. template control.copy.number can generated using generateControlCopyNumberTemplate(), row chromosome arm represented TapestriExperiment. control.copy.number data.frame include 3 columns named arm, copy.number, sample.label. arm chromosome arm names chr1p chrXq, copy.number reference copy number value (2 = diploid), sample.label value corresponding colData column given sample.feature indicate set reference cell barcodes use set copy number. best used workflow cells clustered first respective samples, one cluster used reference population clusters. also allows baseline copy number set chromosome arm individually case reference population completely diploid.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"","code":"calcCopyNumber(   TapestriExperiment,   control.copy.number,   sample.feature = \"cluster\",   remove.bad.probes = FALSE )  generateControlCopyNumberTemplate(   TapestriExperiment,   copy.number = 2,   sample.feature.label = NA )"},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"TapestriExperiment TapestriExperiment object. control.copy.number data.frame columns arm, copy.number, sample.label. See details. sample.feature Character, colData column use subsetting cell.barcodes. Default \"cluster\". remove.bad.probes Logical, TRUE, probes median normalized counts = 0 removed returned TapestriExperiment. FALSE (default), probes median normalized counts = 0 throw error stop function. copy.number Numeric, sets entries copy.number column output. Default 2 (diploid). sample.feature.label Character, sets entries sample.label column output.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"TapestriExperiment object cell-probe copy number values copyNumber assay slot. data.frame 3 columns named arm, copy.number, sample.label","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"generateControlCopyNumberTemplate(): generates data.frame template control.copy.number calcCopyNumber().","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcCopyNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate relative copy number value for each cell-probe unit using reference sample — calcCopyNumber","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object) control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" ) tap.object <- calcCopyNumber(tap.object,   control.copy.number,   sample.feature = \"test.cluster\" ) tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" )"},{"path":"http://joeymays.xyz/karyotapR/reference/calcGMMCopyNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","title":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","text":"Uses control cells simulate expected smoothed copy number distributions chromosomes across model.components (copy number level). uses distributions calculate posterior probabilities cell-chromosome belonging copy number level. cell-chromosome assigned copy number value posterior probability highest. done whole chromosomes chromosome arms.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcGMMCopyNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","text":"","code":"calcGMMCopyNumber(   TapestriExperiment,   cell.barcodes,   control.copy.number,   model.components = 1:5,   model.priors = NULL,   ... )"},{"path":"http://joeymays.xyz/karyotapR/reference/calcGMMCopyNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","text":"TapestriExperiment TapestriExperiment object. cell.barcodes character, vector cell barcodes fit GMM. Usually corresponds diploid control. control.copy.number data.frame columns arm copy.number, indicating known copy number cells cell.barcodes. model.components numeric, vector copy number GMM components calculate, default 1:5 (copy number = 1, 2, 3, 4, 5). model.priors numeric, relative prior probabilities GMM component. NULL (default), assumes equal priors. ... Additional parameters passed internal functions.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcGMMCopyNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","text":"TapestriExperiment object copy number calls based calculated GMMs, saved gmmCopyNumber slot smoothedCopyNumberByChr smoothedCopyNumberByArm altExps. GMM parameters feature.id saved metadata slot.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcGMMCopyNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call copy number for each cell-chromosome using Gaussian mixture models — calcGMMCopyNumber","text":"","code":"# \\donttest{ tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object) control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" ) tap.object <- calcCopyNumber(tap.object,   control.copy.number,   sample.feature = \"test.cluster\" ) tap.object <- calcSmoothCopyNumber(tap.object) #> ℹ Smoothing copy number by median... #> ✔ Smoothing copy number by median... [1.2s] #>  tap.object <- calcGMMCopyNumber(tap.object,   cell.barcodes = colnames(tap.object),   control.copy.number = control.copy.number,   model.components = 1:5 ) #> ℹ Calculating GMMs using 300 input cells. #> ℹ Generating probe values for 500 simulated cells... #> ✔ Generating probe values for 500 simulated cells... [1.3s] #>  #> ℹ Fitting Gaussian distributions to simulated cells... #> ✔ Fitting Gaussian distributions to simulated cells... [13.9s] #>  #> ℹ Calculating posterior probabilities... #> ✔ Calculating posterior probabilities... [404ms] #>  #> ℹ Calling copy number from posterior probabilities... #> ✔ Calling copy number from posterior probabilities... [69ms] #>  #> ✔ Saving whole chromosome copy number calls to altExp: smoothedCopyNumberByChr, #>   assay: gmmCopyNumber... #> ✔ Saving chromosome arm copy number calls to altExp: smoothedCopyNumberByArm, #>   assay: gmmCopyNumber... #> ✔ Saving GMM models and metadata to `gmmParams` slot... # }"},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize raw counts — calcNormCounts","title":"Normalize raw counts — calcNormCounts","text":"Normalizes raw counts counts slot TapestriExperiment returns object normalized counts normcounts slot. Also calculates standard deviation probe using normalized counts adds rowData.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize raw counts — calcNormCounts","text":"","code":"calcNormCounts(TapestriExperiment, method = \"mb\", scaling.factor = NULL)"},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize raw counts — calcNormCounts","text":"TapestriExperiment TapestriExperiment object. method Character, normalization method. Default \"mb\". scaling.factor Numeric, optional number scale normalized counts method == \"libNorm\". Default NULL.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize raw counts — calcNormCounts","text":"TapestriExperiment object normalized counts added normcounts slot.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize raw counts — calcNormCounts","text":"\"mb\" method performs normalization scheme Mission Bio's mosaic package python: Counts barcode normalized relative barcode's mean probe counts normalized relative probe's median. \"libNorm\" method preforms library size normalization, returning proportion counts probe within cell. proportion multiplied scaling.factor provided.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcNormCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize raw counts — calcNormCounts","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object)"},{"path":"http://joeymays.xyz/karyotapR/reference/calcSmoothCopyNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","title":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","text":"calcSmoothCopyNumber() takes copyNumber slot values probes chromosome smooths median (default) chromosome chromosome arm, resulting one copy number value per chromosome chromosome arm cell barcode. Cell-chromosome values discretized integers conventional rounding (1.5 <= x < 2.5 rounds 2). Smoothed copy number discretized smoothed copy number values stored smoothedCopyNumber discreteCopyNumber assays, altExp slots smoothedCopyNumberByChr chromosome-level smoothing, smoothedCopyNumberByArm chromosome arm-level smoothing.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcSmoothCopyNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","text":"","code":"calcSmoothCopyNumber(TapestriExperiment, method = \"median\")"},{"path":"http://joeymays.xyz/karyotapR/reference/calcSmoothCopyNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","text":"TapestriExperiment TapestriExperiment object. method Character, smoothing method: median (default) mean.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcSmoothCopyNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","text":"TapestriExperiment smoothedCopyNumber discreteCopyNumber assays altExp slots smoothedCopyNumberByChr smoothedCopyNumberByArm.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/calcSmoothCopyNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth copy number values across chromosomes and chromosome arms — calcSmoothCopyNumber","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object) control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" ) tap.object <- calcCopyNumber(tap.object,   control.copy.number,   sample.feature = \"test.cluster\" ) tap.object <- calcSmoothCopyNumber(tap.object) #> ℹ Smoothing copy number by median... #> ✔ Smoothing copy number by median... [1.2s] #>"},{"path":"http://joeymays.xyz/karyotapR/reference/callSampleLables.html","id":null,"dir":"Reference","previous_headings":"","what":"Call sample labels based on feature counts — callSampleLables","title":"Call sample labels based on feature counts — callSampleLables","text":"callSampleLables() assigns labels (stored colData column) cells using feature count data colData. useful assigning barcode labels based barcoded reads (see countBarcodedReads). method = max, labels dictated whichever input.features column highest number counts. default, ties broken choosing whichever label lowest index position (ties.method = \"first\"). Samples 0 counts input.features columns labeled according neg.label. one feature column used, labels assigned cells counts > min.count.threshold, neg.label otherwise.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/callSampleLables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call sample labels based on feature counts — callSampleLables","text":"","code":"callSampleLables(   TapestriExperiment,   input.features,   output.feature = \"sample.call\",   return.table = FALSE,   neg.label = NA,   method = \"max\",   ties.method = \"first\",   min.count.threshold = 1 )"},{"path":"http://joeymays.xyz/karyotapR/reference/callSampleLables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call sample labels based on feature counts — callSampleLables","text":"TapestriExperiment TapestriExperiment object. input.features Character vector, column names colData evaluate. output.feature Character, column name use call output. Default \"sample.call\". return.table Logical, TRUE, returns data.frame sample.calls. FALSE (default), returns updated TapestriExperiment object. neg.label Character, label samples counts. Default NA. method Character, call method. \"max\" currently supported, calls based whichever input.features column counts. ties.method Character, passed max.col() indicating break ties. Default \"first\". min.count.threshold Numeric, minimum number counts per cell use call. Default 1.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/callSampleLables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call sample labels based on feature counts — callSampleLables","text":"TapestriExperiment object sample calls added colData column sample.name. return.table == TRUE, data.frame sample calls.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/callSampleLables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call sample labels based on feature counts — callSampleLables","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". colData(tap.object)$gRNA1 <- 2 # example barcode counts colData(tap.object)$gRNA2 <- 10 # example barcode counts tap.object <- callSampleLables(tap.object,   input.features = c(\"gRNA1\", \"gRNA2\"),   output.feature = \"sample.grna\" )"},{"path":"http://joeymays.xyz/karyotapR/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the top-left corner of a matrix — corner","title":"Print the top-left corner of a matrix — corner","text":"Outputs 5 rows columns input matrix object (rownames colnames) get quick look without filling console.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the top-left corner of a matrix — corner","text":"","code":"corner(input.mat)"},{"path":"http://joeymays.xyz/karyotapR/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the top-left corner of a matrix — corner","text":"input.mat matrix-like object.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the top-left corner of a matrix — corner","text":"matrix-like object matching input class, subset maximum 5 rows columns.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the top-left corner of a matrix — corner","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". corner(assay(tap.object, \"counts\")) #>         cell_1 cell_2 cell_3 cell_4 cell_5 #> probe_1     97    108    100    102    104 #> probe_2    103     98     91     97    105 #> probe_3     99    100    104    103    100 #> probe_4    114    106    107     99    103 #> probe_5    108    101     92     99     99"},{"path":"http://joeymays.xyz/karyotapR/reference/countBarcodedReads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get read counts from barcoded reads — countBarcodedReads","title":"Get read counts from barcoded reads — countBarcodedReads","text":"countBarcodedReads() countBarcodedReadsFromContig() match exogenous DNA barcode sequences associated cell barcodes saves colData (cell barcode metadata) TapestriExperiment. countBarcodedReads() shortcut countBarcodedReadsFromContig(), allowing user specify 'gRNA' 'barcode' use grnaCounts barcodeCounts altExp slots. entries barcode.lookup table present sample, allowing users keep one master table/file available barcode sequences use experiments. Rsamtools Biostrings packages must installed use functions.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/countBarcodedReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get read counts from barcoded reads — countBarcodedReads","text":"","code":"countBarcodedReads(   TapestriExperiment,   bam.file,   barcode.lookup,   probe,   return.table = FALSE,   max.mismatch = 2,   with.indels = FALSE,   ... )  countBarcodedReadsFromContig(   bam.file,   barcode.lookup,   contig,   cell.barcode.tag = \"RG\",   max.mismatch = 2,   with.indels = FALSE )"},{"path":"http://joeymays.xyz/karyotapR/reference/countBarcodedReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get read counts from barcoded reads — countBarcodedReads","text":"TapestriExperiment TapestriExperiment object bam.file File path BAM file. .bai BAM index file must location (can generated using Rsamtools::indexBam()). barcode.lookup data.frame first column barcode identifier/name second column DNA sequence. Headers ignored. probe Character, either \"gRNA\" \"barcode\" parse counts grnaCounts barcodeCounts altExp slots, respectively. return.table Logical, TRUE, returns table read counts per barcode. FALSE, returns TapestriExperiment. Default FALSE. max.mismatch Numeric, maximum minimum number mismatching letters allowed. Default 2. .indels TRUE, indels allowed. Default FALSE. ... Arguments pass countBarcodedReadsFromContig(). contig Character, contig chromosome name search barcodes . Can vector one contig expand search space. cell.barcode.tag Character length 2, indicates cell barcode field BAM, specified Tapestri pipeline (currently \"RG\"). Default \"RG\".","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/countBarcodedReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get read counts from barcoded reads — countBarcodedReads","text":"TapestriExperiment barcoded read counts added colData. data.frame read counts specified barcode.","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/countBarcodedReads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get read counts from barcoded reads — countBarcodedReads","text":"","code":"if (FALSE) { counts <- countBarcodedReads(   TapestriExperiment,   bam.file, barcode.lookup, \"gRNA\" ) } if (FALSE) { counts <- countBarcodedReadsFromContig(bam.file, barcode.lookup, \"virus_ref2\") }"},{"path":"http://joeymays.xyz/karyotapR/reference/getChrOrder.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chromosome order from a string of chromosome/contig names — getChrOrder","title":"Get chromosome order from a string of chromosome/contig names — getChrOrder","text":"getChrOrder() takes string chromosome contig names returns indices string typical chromosome order, .e. 1 22, X, Y. Contig names match 1:22, X, Y sorted numerically alphabetically (numbers coming first), added end order. output string can used sort input string typical chromosome order.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getChrOrder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chromosome order from a string of chromosome/contig names — getChrOrder","text":"","code":"getChrOrder(chr.vector)"},{"path":"http://joeymays.xyz/karyotapR/reference/getChrOrder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chromosome order from a string of chromosome/contig names — getChrOrder","text":"chr.vector Character vector chromosome contig names.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getChrOrder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chromosome order from a string of chromosome/contig names — getChrOrder","text":"numerical vector input vectors indices chromosome order.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getChrOrder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chromosome order from a string of chromosome/contig names — getChrOrder","text":"","code":"chr.order <- getChrOrder(c(1, \"virus\", 5, \"X\", 22, \"plasmid\", \"Y\")) ordered.vector <- c(1, \"virus\", 5, \"X\", 22, \"plasmid\", \"Y\")[chr.order]"},{"path":"http://joeymays.xyz/karyotapR/reference/getCytobands.html","id":null,"dir":"Reference","previous_headings":"","what":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","title":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","text":"getCytobands() retrieves chromosome arm cytoband probe based stored positional data saves rowData. run automatically part createTapestriExperiment(). Note: downstream smoothing plotting functions may fail chromosome arms present rowData.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getCytobands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","text":"","code":"getCytobands(TapestriExperiment, genome = \"hg19\", verbose = TRUE)"},{"path":"http://joeymays.xyz/karyotapR/reference/getCytobands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","text":"TapestriExperiment TapestriExperiment object. genome Character, reference genome use. hg19 currently supported. verbose Logical, TRUE (default), progress output message text.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getCytobands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","text":"TapestriExperiment object rowData updated include chromosome arms cytobands.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getCytobands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add chromosome cytobands and chromosome arms to TapestriExperiment — getCytobands","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- getCytobands(tap.object, genome = \"hg19\") #> ℹ Adding cytobands from hg19."},{"path":"http://joeymays.xyz/karyotapR/reference/getGMMBoundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","title":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","text":"Calculate decision boundaries components copy number GMMs","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getGMMBoundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","text":"","code":"getGMMBoundaries(TapestriExperiment, chromosome.scope = \"chr\")"},{"path":"http://joeymays.xyz/karyotapR/reference/getGMMBoundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","text":"TapestriExperiment TapestriExperiment object. chromosome.scope \"chr\" \"arm\", using models either whole chromosomes chromosome arms. Default \"chr\".","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getGMMBoundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","text":"tibble containing boundary values GMMs feature.id.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getGMMBoundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate decision boundaries between components of copy number GMMs — getGMMBoundaries","text":"","code":"# \\donttest{ tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object) control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" ) tap.object <- calcCopyNumber(tap.object,   control.copy.number,   sample.feature = \"test.cluster\" ) tap.object <- calcSmoothCopyNumber(tap.object) #> ℹ Smoothing copy number by median... #> ✔ Smoothing copy number by median... [1.3s] #>  tap.object <- calcGMMCopyNumber(tap.object,   cell.barcodes = colnames(tap.object),   control.copy.number = control.copy.number,   model.components = 1:5 ) #> ℹ Calculating GMMs using 300 input cells. #> ℹ Generating probe values for 500 simulated cells... #> ✔ Generating probe values for 500 simulated cells... [1.3s] #>  #> ℹ Fitting Gaussian distributions to simulated cells... #> ✔ Fitting Gaussian distributions to simulated cells... [13.2s] #>  #> ℹ Calculating posterior probabilities... #> ✔ Calculating posterior probabilities... [410ms] #>  #> ℹ Calling copy number from posterior probabilities... #> ✔ Calling copy number from posterior probabilities... [69ms] #>  #> ✔ Saving whole chromosome copy number calls to altExp: smoothedCopyNumberByChr, #>   assay: gmmCopyNumber... #> ✔ Saving chromosome arm copy number calls to altExp: smoothedCopyNumberByArm, #>   assay: gmmCopyNumber... #> ✔ Saving GMM models and metadata to `gmmParams` slot...  boundaries <- getGMMBoundaries(tap.object,   chromosome.scope = \"chr\" ) # }"},{"path":"http://joeymays.xyz/karyotapR/reference/getTidyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tidy-style data from TapestriExperiment objects — getTidyData","title":"Get tidy-style data from TapestriExperiment objects — getTidyData","text":"getTidyData() pulls data indicated assay /altExp slot(s), rearranges tidy format. colData (cell metadata) top-level/main experiment included. rowData (probe metadata) indicated assay /altExp slot(s) included. Attempts made sort \"chr\" \"start.pos\" columns present simplify plotting downstream operations.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getTidyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tidy-style data from TapestriExperiment objects — getTidyData","text":"","code":"getTidyData(   TapestriExperiment,   alt.exp = NULL,   assay = NULL,   feature.id.as.factor = TRUE )"},{"path":"http://joeymays.xyz/karyotapR/reference/getTidyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tidy-style data from TapestriExperiment objects — getTidyData","text":"TapestriExperiment TapestriExperiment object. alt.exp Character, altExp slot use. NULL (default) uses top-level/main experiment. assay Character, assay slot use. NULL (default) uses first-indexed assay (often \"counts\"). feature.id..factor Logical, TRUE (default), feature.id column returned factor.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getTidyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tidy-style data from TapestriExperiment objects — getTidyData","text":"tibble tidy data corresponding metadata colData rowData.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/getTidyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tidy-style data from TapestriExperiment objects — getTidyData","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tidy.data <- getTidyData(tap.object, alt.exp = \"alleleFrequency\")"},{"path":"http://joeymays.xyz/karyotapR/reference/karyotapR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"karyotapR: DNA Copy Number Analysis for Genome-Wide Tapestri Panels — karyotapR-package","title":"karyotapR: DNA Copy Number Analysis for Genome-Wide Tapestri Panels — karyotapR-package","text":"Analysis DNA copy number single cells using custom genome-wide targeted DNA sequencing panels Mission Bio Tapestri platform. Users can easily parse, manipulate, visualize datasets produced automated 'Tapestri Pipeline', support normalization, clustering, copy number calling. Functions also available deconvolute multiplexed samples genotype parsing barcoded reads exogenous lentiviral constructs.","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/karyotapR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"karyotapR: DNA Copy Number Analysis for Genome-Wide Tapestri Panels — karyotapR-package","text":"Maintainer: Joseph Mays josephcmays@gmail.com (ORCID) [copyright holder]","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":null,"dir":"Reference","previous_headings":"","what":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"moveNonGenomeProbes() takes probe IDs corresponding grnaProbe barcodeProbe slots TapestriExperiment object, well probes chrY, moves altExp slots object. allows counts associated metadata manipulated separately without interfering probes used CNV measurements target endogenous genome. SingleCellExperiment::splitAltExps() can used manual specification probes move altExp slots shortcut slots used.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"","code":"moveNonGenomeProbes(TapestriExperiment)"},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"TapestriExperiment TapestriExperiment object.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"TapestriExperiment altExp slots filled counts metadata non-genomic probes.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"moveNonGenomeProbes() moves probes corresponding specified tags altExp (alternative experiment) slots TapestriExperiment object. probes correspond chromosome therefore used call copy number variants. exception probes chromosome Y; CNVs chrY rare, move altExp separate analysis. Probes corresponding barcodeProbe grnaProbe slots, specified panel.id shortcut manually (see Custom Slot Getters Setters), automatically moved altExp operation well. probes present, function generate warning message, always safe (recommended) run default. remaining probes targeting human chromosome specified shortcut tags moved otherProbeCounts slot. function run automatically default default behavior part createTapestriExperiment().","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/moveNonGenomeProbes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move non-genome probes counts and metadata to altExp slots — moveNonGenomeProbes","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- moveNonGenomeProbes(tap.object) #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ ChrY probe ID(s) not found in TapestriExperiment object. #> ℹ No non-genomic probe IDs found."},{"path":"http://joeymays.xyz/karyotapR/reference/newTapestriExperimentExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Example TapestriExperiment — newTapestriExperimentExample","title":"Create Example TapestriExperiment — newTapestriExperimentExample","text":"Creates TapestriExperiment object demonstration purposes, includes 240 probes across genome, 300 cells 3 types. Raw counts generated randomly. Type 1 75 cells, XY, diploid. Type 2 100 cells, XX, 3 copies chr 7, otherwise diploid. Type 3 125 cells, XY, 1 copy chr 1p, otherwise diploid.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/newTapestriExperimentExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Example TapestriExperiment — newTapestriExperimentExample","text":"","code":"newTapestriExperimentExample()"},{"path":"http://joeymays.xyz/karyotapR/reference/newTapestriExperimentExample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Example TapestriExperiment — newTapestriExperimentExample","text":"TapestriExperiment object demo data.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/newTapestriExperimentExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Example TapestriExperiment — newTapestriExperimentExample","text":"","code":"tapExperiment <- newTapestriExperimentExample() #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\"."},{"path":"http://joeymays.xyz/karyotapR/reference/plotCopyNumberGMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot copy number GMM components — plotCopyNumberGMM","title":"Plot copy number GMM components — plotCopyNumberGMM","text":"Plots probability densities GMM components given chromosome chromosome arm, store TapestriExperiment. calcGMMCopyNumber() must run first.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/plotCopyNumberGMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot copy number GMM components — plotCopyNumberGMM","text":"","code":"plotCopyNumberGMM(   TapestriExperiment,   feature.id = 1,   chromosome.scope = \"chr\",   draw.boundaries = FALSE )"},{"path":"http://joeymays.xyz/karyotapR/reference/plotCopyNumberGMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot copy number GMM components — plotCopyNumberGMM","text":"TapestriExperiment TapestriExperiment object. feature.id chromosome chromosome arm plot. chromosome.scope \"chr\" \"arm\", plotting models either whole chromosomes chromosome arms. draw.boundaries logical, TRUE, draw decision boundaries Gaussian component.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/plotCopyNumberGMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot copy number GMM components — plotCopyNumberGMM","text":"ggplot object, density plot","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/plotCopyNumberGMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot copy number GMM components — plotCopyNumberGMM","text":"","code":"# \\donttest{ tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- calcNormCounts(tap.object) control.copy.number <- generateControlCopyNumberTemplate(tap.object,   copy.number = 2,   sample.feature.label = \"cellline1\" ) tap.object <- calcCopyNumber(tap.object,   control.copy.number,   sample.feature = \"test.cluster\" ) tap.object <- calcSmoothCopyNumber(tap.object) #> ℹ Smoothing copy number by median... #> ✔ Smoothing copy number by median... [1.3s] #>  tap.object <- calcGMMCopyNumber(tap.object,   cell.barcodes = colnames(tap.object),   control.copy.number = control.copy.number,   model.components = 1:5 ) #> ℹ Calculating GMMs using 300 input cells. #> ℹ Generating probe values for 500 simulated cells... #> ✔ Generating probe values for 500 simulated cells... [1.3s] #>  #> ℹ Fitting Gaussian distributions to simulated cells... #> ✔ Fitting Gaussian distributions to simulated cells... [13.2s] #>  #> ℹ Calculating posterior probabilities... #> ✔ Calculating posterior probabilities... [395ms] #>  #> ℹ Calling copy number from posterior probabilities... #> ✔ Calling copy number from posterior probabilities... [82ms] #>  #> ✔ Saving whole chromosome copy number calls to altExp: smoothedCopyNumberByChr, #>   assay: gmmCopyNumber... #> ✔ Saving chromosome arm copy number calls to altExp: smoothedCopyNumberByArm, #>   assay: gmmCopyNumber... #> ✔ Saving GMM models and metadata to `gmmParams` slot...  tap.object <- plotCopyNumberGMM(tap.object,   feature.id = 7,   chromosome.scope = \"chr\",   draw.boundaries = TRUE ) # }"},{"path":"http://joeymays.xyz/karyotapR/reference/reducedDimPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot for dimensional reduction results — reducedDimPlot","title":"Scatter plot for dimensional reduction results — reducedDimPlot","text":"Plots scatter plot indicated dimensional reduction results.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/reducedDimPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot for dimensional reduction results — reducedDimPlot","text":"","code":"reducedDimPlot(   TapestriExperiment,   alt.exp = \"alleleFrequency\",   dim.reduction,   dim.x = 1,   dim.y = 2,   group.label = NULL )"},{"path":"http://joeymays.xyz/karyotapR/reference/reducedDimPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot for dimensional reduction results — reducedDimPlot","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp use, NULL uses top-level/main experiment. Default \"alleleFrequency\". dim.reduction Character, dimension reduction plot, either \"PCA\" \"UMAP\". dim.x Numeric, index dimensional reduction data plot X axis. Default 1. dim.y Numeric, index dimensional reduction data plot Y axis. Default 2. group.label Character, colData column grouping samples color. Default NULL.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/reducedDimPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot for dimensional reduction results — reducedDimPlot","text":"ggplot2 object, scatter plot","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/reducedDimPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot for dimensional reduction results — reducedDimPlot","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- runPCA(tap.object, alt.exp = \"alleleFrequency\") reducedDimPlot(tap.object, dim.reduction = \"pca\")"},{"path":"http://joeymays.xyz/karyotapR/reference/runClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster 2D data — runClustering","title":"Cluster 2D data — runClustering","text":"Clusters data using dbscan method saves cluster assignments cell barcode colData. Generally used assign clusters UMAP projection PCA UMAP dimensional reduction.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster 2D data — runClustering","text":"","code":"runClustering(   TapestriExperiment,   alt.exp = \"alleleFrequency\",   dim.reduction = \"UMAP\",   eps = 0.8,   dim.1 = 1,   dim.2 = 2,   ... )"},{"path":"http://joeymays.xyz/karyotapR/reference/runClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster 2D data — runClustering","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp slot use. NULL uses top-level/main experiment. Default \"alleleFrequency\". dim.reduction Character, reduced dimension data use. Default \"UMAP\". eps Numeric, dbscan eps parameter. Lower increase cluster granularity. See dbscan::dbscan(). Default 0.8. dim.1 Numeric, index data dimension use. Default 1. dim.2 Numeric, index data dimension use. Default 2. ... Additional parameters pass dbscan::dbscan().","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster 2D data — runClustering","text":"TapestriExperiment object updated colData containing cluster assignments.","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/runClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster 2D data — runClustering","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- runPCA(tap.object, alt.exp = \"alleleFrequency\") tap.object <- runUMAP(tap.object, pca.dims = 1:3) #> ℹ Running UMAP on: alleleFrequency. tap.object <- runClustering(tap.object, dim.reduction = \"UMAP\", eps = 0.8) #> ℹ Finding clusters in: alleleFrequency UMAP"},{"path":"http://joeymays.xyz/karyotapR/reference/runPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster assay data by Principal Components Analysis — runPCA","title":"Cluster assay data by Principal Components Analysis — runPCA","text":"Analyzes assay data Principal Components Analysis (PCA) saves results reducedDims slot TapestriObject.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster assay data by Principal Components Analysis — runPCA","text":"","code":"runPCA(   TapestriExperiment,   alt.exp = \"alleleFrequency\",   assay = NULL,   sd.min.threshold = NULL,   center = TRUE,   scale. = TRUE )"},{"path":"http://joeymays.xyz/karyotapR/reference/runPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster assay data by Principal Components Analysis — runPCA","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp use, NULL uses top-level/main experiment. Default \"alleleFrequency\". assay Character, assay use. NULL (default) uses first-indexed assay. sd.min.threshold Numeric, minimum threshold allelefreq.sd. Increase run PCA fewer, variable dimensions. Set NULL using alleleFrequency slot. Default NULL. center Logical, TRUE (default), variables shifted zero centered. See stats::prcomp(). scale. Logical,TRUE (default), variables scaled unit variance prior PCA. See stats::prcomp().","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster assay data by Principal Components Analysis — runPCA","text":"TapestriExperiment PCA results saved reducedDims slot altExp, proportion variance explained PC saved metadata slot altExp.","code":""},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/reference/runPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster assay data by Principal Components Analysis — runPCA","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- runPCA(tap.object, alt.exp = \"alleleFrequency\")"},{"path":"http://joeymays.xyz/karyotapR/reference/runUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster matrix data by UMAP — runUMAP","title":"Cluster matrix data by UMAP — runUMAP","text":"Analyzes matrix data UMAP saves results reducedDims slot TapestriObject.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster matrix data by UMAP — runUMAP","text":"","code":"runUMAP(   TapestriExperiment,   alt.exp = \"alleleFrequency\",   assay = NULL,   use.pca.dims = TRUE,   pca.dims = NULL,   ... )"},{"path":"http://joeymays.xyz/karyotapR/reference/runUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster matrix data by UMAP — runUMAP","text":"TapestriExperiment TapestriExperiment object alt.exp Character, altExp use, NULL uses top-level/main experiment. Default \"alleleFrequency\". assay Character, assay use. NULL (default) uses first-indexed assay. used use.pca.dims = TRUE. use.pca.dims Logical, TRUE, uses experiment PCA, otherwise uses assay data. Default TRUE. pca.dims Numeric, indices PCs use UMAP. Default NULL. ... Additional parameters pass umap::umap(), e.g. configuration (see umap::umap.defaults()).","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runUMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster matrix data by UMAP — runUMAP","text":"TapestriExperiment UMAP embeddings saved reducedDims slot altExp.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/runUMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster matrix data by UMAP — runUMAP","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". tap.object <- runPCA(tap.object, alt.exp = \"alleleFrequency\") tap.object <- runUMAP(tap.object, pca.dims = 1:3) #> ℹ Running UMAP on: alleleFrequency."},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"Get set custom slots TapestriExperiment. Slots include barcodeProbe sample barcode probe ID grnaProbe gRNA-associated probe ID. used shortcuts moveNonGenomeProbes() countBarcodedReads(). gmmParams holds parameters metadata GMM copy number calling models.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"","code":"barcodeProbe(x)  # S4 method for TapestriExperiment barcodeProbe(x)  barcodeProbe(x) <- value  # S4 method for TapestriExperiment barcodeProbe(x) <- value  grnaProbe(x)  # S4 method for TapestriExperiment grnaProbe(x)  grnaProbe(x) <- value  # S4 method for TapestriExperiment grnaProbe(x) <- value  gmmParams(x)  # S4 method for TapestriExperiment gmmParams(x)"},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"x TapestriExperiment object value Character, probe ID assign slot TapestriExperiment TapestriExperiment object","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"getter methods barcodeProbe, grnaProbe, gmmParams, value given slot returned. setter methods barcodeProbe grnaProbe, TapestriExperiment object returned modifications made given slot.","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"barcodeProbe(TapestriExperiment): barcodeProbe getter barcodeProbe(TapestriExperiment) <- value: barcodeProbe setter grnaProbe(TapestriExperiment): grnaProbe getter grnaProbe(TapestriExperiment) <- value: grnaProbe setter gmmParams(TapestriExperiment): gmmParams getter","code":""},{"path":"http://joeymays.xyz/karyotapR/reference/slotGettersSetters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getter and Setter functions for TapestriExperiment slots — Custom Slot Getters and Setters","text":"","code":"tap.object <- newTapestriExperimentExample() # example TapestriExperiment object #> ℹ Moving gRNA probe  to `altExp` slot \"grnaCounts\". #> ℹ Moving barcode probe  to `altExp` slot \"barcodeCounts\". #> ℹ Moving chrY probe(s) probe_231, probe_232, probe_233, probe_234, probe_235, probe_236, probe_237, probe_238, probe_239, and probe_240 to `altExp` slot \"chrYCounts\". barcodeProbe(tap.object) <- \"Probe01\" barcodeProbe(tap.object) #> [1] \"Probe01\"  grnaProbe(tap.object) <- \"Probe02\" grnaProbe(tap.object) #> [1] \"Probe02\"  gmmParams(tap.object) #> list()"},{"path":[]},{"path":"http://joeymays.xyz/karyotapR/news/index.html","id":"karyotapr-101","dir":"Changelog","previous_headings":"","what":"karyotapR 1.0.1","title":"karyotapR 1.0.1","text":"CRAN release: 2023-09-07 karyotapR now available CRAN!","code":""},{"path":"http://joeymays.xyz/karyotapR/news/index.html","id":"karyotapr-100","dir":"Changelog","previous_headings":"","what":"karyotapR 1.0.0","title":"karyotapR 1.0.0","text":"Initial CRAN submission.","code":""}]
